import { StatusCodes } from "http-status-codes";

import type { Car } from "@/api/car/carModel";
import { CarRepository } from "@/api/car/carRepository";
import { ServiceResponse } from "@/common/models/serviceResponse";
import { logger } from "@/server";
import { json } from "express";
import {
	GenerateSeatsDto,
} from "@/api/car/carModel";

export class CarService {
	private carRepository: CarRepository;

	constructor(repository: CarRepository = new CarRepository()) {
		this.carRepository = repository;
	}

	async findAll(filter: any, options: any) {
		try {
			const result = await this.carRepository.findAll(filter, options);
			return ServiceResponse.success("Xe bu√Ωt ƒë√£ ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng", result);
		} catch (error) {
			return ServiceResponse.failure("Kh√¥ng th·ªÉ l·∫•y xe bu√Ωt" + error, null);
		}
	}

	// Retrieves a single Car by their ID
	async findById(id: number): Promise<ServiceResponse<Car | null>> {
		try {
			const Car = await this.carRepository.findByIdAsync(id);
			if (!Car) {
				return ServiceResponse.failure("Kh√¥ng t√¨m th·∫•y xe", null, StatusCodes.NOT_FOUND);
			}
			return ServiceResponse.success<Car>("Xe ƒë√£ t√¨m th·∫•y", Car);
		} catch (ex) {
			const errorMessage = `L·ªói khi t√¨m Xe c√≥ ID ${id}:, ${(ex as Error).message}`;
			logger.error(errorMessage);
			return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi t√¨m xe." + errorMessage, null, StatusCodes.INTERNAL_SERVER_ERROR);
		}
	}

	// Deletes a Car by their ID
	async delete(id: number): Promise<ServiceResponse<Car | null>> {
		try {
			const car = await this.carRepository.findByIdAsync(id);
			if (!car) {
				return ServiceResponse.failure("Kh√¥ng t√¨m th·∫•y xe", null, StatusCodes.NOT_FOUND);
			}

			await this.carRepository.deleteAsync(id);
			return ServiceResponse.success<Car>("Xe ƒë√£ x√≥a", car);
		} catch (ex) {
			const errorMessage = `L·ªói khi x√≥a Xe c√≥ ID ${id}: ${(ex as Error).message}`;
			logger.error(errorMessage);
			return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi x√≥a Car." + errorMessage, null, StatusCodes.INTERNAL_SERVER_ERROR);
		}
	}

	// async createCar(data: Omit<Car, "id" | "created_at" | "updated_at">): Promise<ServiceResponse<Car | null>> {
	// 	try {
	// 		const newCar = await this.carRepository.createCarAsync(data);

	// 		return ServiceResponse.success<Car>("Car created successfully", newCar, StatusCodes.CREATED);
	// 	} catch (ex) {
	// 		const errorMessage = `Error creating car: ${(ex as Error).message}`;
	// 		console.error("Full error object:", ex);
	// 		logger.error(errorMessage);
	// 		return ServiceResponse.failure("An error occurred while creating car.", null, StatusCodes.INTERNAL_SERVER_ERROR);
	// 	}
	// }

	async createCar(data: Omit<Car, "id" | "created_at" | "updated_at">): Promise<ServiceResponse<Car | null>> {
		try {
			// Ki·ªÉm tra xem ƒë√£ c√≥ xe tr√πng t√™n ch∆∞a
			const existingCar = await this.carRepository.findByNameAsync(data.name);
			if (existingCar) {
				return ServiceResponse.failure(
					`Xe c√≥ t√™n ${data.name} ƒë√£ t·ªìn t·∫°i.`,
					null,
					StatusCodes.CONFLICT
				);
			}

			// T·∫°o xe m·ªõi n·∫øu kh√¥ng b·ªã tr√πng t√™n
			const newCar = await this.carRepository.createCarAsync(data);
			return ServiceResponse.success<Car>(
				"Xe ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
				newCar,
				StatusCodes.CREATED
			);
		} catch (ex) {
			const errorMessage = `Error creating car: ${(ex as Error).message}`;
			console.error("Full error object:", ex);
			logger.error(errorMessage);
			return ServiceResponse.failure(
				"ƒê√£ x·∫£y ra l·ªói khi t·∫°o xe.",
				null,
				StatusCodes.INTERNAL_SERVER_ERROR
			);
		}
	}


	async updateCar(id: number, data: Partial<Car>): Promise<ServiceResponse<Car | null>> {
		try {
			const car = await this.carRepository.findByIdAsync(id);

			if (!car) {
				return ServiceResponse.failure("Kh√¥ng t√¨m th·∫•y xe", null, StatusCodes.NOT_FOUND);
			}

			const updatedCar = await this.carRepository.updateAsync(id, data);

			if (!updatedCar) {
				return ServiceResponse.failure("Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c xe", null, StatusCodes.BAD_REQUEST);
			}

			return ServiceResponse.success<Car>("Xe ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t", updatedCar);
		} catch (ex) {
			const errorMessage = `L·ªói khi c·∫≠p nh·∫≠t Xe c√≥ ${id}: ${(ex as Error).message}`;
			logger.error(errorMessage);
			return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t Car.", null, StatusCodes.INTERNAL_SERVER_ERROR);
		}
	}

	// async generateSeatByCarId(
	// 	carId: number,
	// 	payload: GenerateSeatsDto
	// ): Promise<ServiceResponse<any>> {
	// 	const car = await this.carRepository.findByIdAsync(carId);
	// 	if (!car) {
	// 		return ServiceResponse.failure("Car not found", null, StatusCodes.NOT_FOUND);
	// 	}

	// 	const exists = await this.carRepository.existingSeats(carId);
	// 	if (exists) {
	// 		return ServiceResponse.failure("Seats already exist", null, StatusCodes.CONFLICT);
	// 	}

	// 	let seatNumber = 1;
	// 	const now = new Date();
	// 	const seatsToInsert = [];

	// 	for (const config of payload.seat_config) {
	// 		for (let i = 0; i < config.quantity; i++) {
	// 			seatsToInsert.push({
	// 				bus_id: carId,
	// 				seat_number: `S${seatNumber++}`,
	// 				seat_type: config.seat_type,
	// 				price_for_type_seat: config.price,
	// 				status: "AVAILABLE",
	// 				created_at: now,
	// 				updated_at: now
	// 			});
	// 		}
	// 	}

	// 	await this.carRepository.insertSeats(seatsToInsert);
	// 	return ServiceResponse.success("Seats created successfully", seatsToInsert);
	// }
	async generateSeatByCarId(
		carId: number,
		payload: GenerateSeatsDto
	): Promise<ServiceResponse<any>> {
		const car = await this.carRepository.findByIdAsync(carId);
		if (!car) {
			return ServiceResponse.failure("Kh√¥ng t√¨m th·∫•y xe", null, StatusCodes.NOT_FOUND);
		}

		const exists = await this.carRepository.existingSeats(carId);
		if (exists) {
			return ServiceResponse.failure("Gh·∫ø ƒë√£ c√≥ s·∫µn", null, StatusCodes.CONFLICT);
		}

		// üëá T√≠nh t·ªïng s·ªë gh·∫ø c·∫•u h√¨nh
		const totalSeats = payload.seat_config.reduce((sum, config) => sum + config.quantity, 0);

		// üëá So s√°nh v·ªõi capacity
		if (totalSeats !== car.capacity) {
			return ServiceResponse.failure(
				`C·∫•u h√¨nh gh·∫ø kh√¥ng kh·ªõp: d·ª± ki·∫øn ${car.capacity} gh·∫ø nh∆∞ng ƒë√£ c√≥ ${totalSeats}`,
				null,
				StatusCodes.BAD_REQUEST
			);
		}

		let seatNumber = 1;
		const now = new Date();
		const seatsToInsert = [];

		for (const config of payload.seat_config) {
			for (let i = 0; i < config.quantity; i++) {
				seatsToInsert.push({
					bus_id: carId,
					seat_number: `S${seatNumber++}`,
					seat_type: config.seat_type,
					price_for_type_seat: config.price,
					status: "AVAILABLE",
					created_at: now,
					updated_at: now
				});
			}
		}

		await this.carRepository.insertSeats(seatsToInsert);
		return ServiceResponse.success("Gh·∫ø ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng", seatsToInsert);
	}


	async PopularGarage(): Promise<ServiceResponse<Car[] | null>> {
		try {
			const car = await this.carRepository.getTopBusCompanies();
			if (!car) {
				return ServiceResponse.failure("Kh√¥ng t√¨m th·∫•y xe", null, StatusCodes.NOT_FOUND);
			}
			return ServiceResponse.success("C√°c c√¥ng ty xe bu√Ωt h√†ng ƒë·∫ßu ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng", car);
		} catch (ex) {
			return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi t√¨m Xe.", null, StatusCodes.INTERNAL_SERVER_ERROR);
		}
	}
}

export const carService = new CarService();
