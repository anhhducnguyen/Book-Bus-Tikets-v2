import { StatusCodes } from "http-status-codes";
import type { Station } from "@/api/station/stationModel";
import { StationRepository } from "@/api/station/stationRepository";
import { ServiceResponse } from "@/common/models/serviceResponse";
import { logger } from "@/server";

export class StationService {
  private stationRepository = new StationRepository();

  // üöÄ **L·∫•y t·∫•t c·∫£ c√°c Station v·ªõi ph√¢n trang, t√¨m ki·∫øm v√† s·∫Øp x·∫øp**
  async findAll(
    page: number,
    limit: number,
    search?: string,
    sortBy?: string,
    order?: string
  ): Promise<ServiceResponse<Station[] | null>> {
    try {
      const stations = await this.stationRepository.findAllAsync(page, limit, search, sortBy, order);

      if (!stations || stations.length === 0) {
        return ServiceResponse.failure("Kh√¥ng t√¨m th·∫•y b·∫øn xe n√†o", null, StatusCodes.NOT_FOUND);
      }

      return ServiceResponse.success<Station[]>("Danh s√°ch b·∫øn xe", stations);
    } catch (error) {
      const errorMessage = `‚ùå L·ªói khi t√¨m t·∫•t c·∫£ b·∫øn xe: ${(error as Error).message}`;
      logger.error(errorMessage);
      return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi truy xu·∫•t b·∫øn xe", null, StatusCodes.INTERNAL_SERVER_ERROR);
    }
  }

  // üöÄ **L·∫•y th√¥ng tin Station theo ID**
  async findById(id: number): Promise<ServiceResponse<Station | null>> {
    try {
      const station = await this.stationRepository.findByIdAsync(id);

      if (!station) {
        return ServiceResponse.failure("B·∫øn xe kh√¥ng t·ªìn t·∫°i", null, StatusCodes.NOT_FOUND);
      }

      return ServiceResponse.success<Station>("Th√¥ng tin b·∫øn xe", station);
    } catch (error) {
      const errorMessage = `‚ùå L·ªói khi t√¨m b·∫øn xe v·ªõi ID ${id}: ${(error as Error).message}`;
      logger.error(errorMessage);
      return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi t√¨m b·∫øn xe", null, StatusCodes.INTERNAL_SERVER_ERROR);
    }
  }

  // üöÄ **T·∫°o m·ªõi m·ªôt Station**
  async create(station: Omit<Station, "id">): Promise<ServiceResponse<number | null>> {
    try {
      const newId = await this.stationRepository.createAsync(station);
      return ServiceResponse.success<number>("T·∫°o m·ªõi b·∫øn xe th√†nh c√¥ng", newId);
    } catch (error) {
      const errorMessage = `‚ùå L·ªói khi t·∫°o m·ªõi b·∫øn xe: ${(error as Error).message}`;
      logger.error(errorMessage);
      return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi t·∫°o m·ªõi b·∫øn xe", null, StatusCodes.INTERNAL_SERVER_ERROR);
    }
  }

  // üöÄ **C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt Station**
  async update(id: number, station: Partial<Station>): Promise<ServiceResponse<boolean>> {
    try {
      const isUpdated = await this.stationRepository.updateAsync(id, station);

      if (!isUpdated) {
        return ServiceResponse.failure("B·∫øn xe kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ c·∫≠p nh·∫≠t", false, StatusCodes.NOT_FOUND);
      }

      return ServiceResponse.success<boolean>("C·∫≠p nh·∫≠t b·∫øn xe th√†nh c√¥ng", true);
    } catch (error) {
      const errorMessage = `‚ùå L·ªói khi c·∫≠p nh·∫≠t b·∫øn xe v·ªõi ID ${id}: ${(error as Error).message}`;
      logger.error(errorMessage);
      return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t b·∫øn xe", false, StatusCodes.INTERNAL_SERVER_ERROR);
    }
  }

  // üöÄ **X√≥a m·ªôt Station theo ID**
  async delete(id: number): Promise<ServiceResponse<boolean>> {
    try {
      const isDeleted = await this.stationRepository.deleteAsync(id);

      if (!isDeleted) {
        return ServiceResponse.failure("B·∫øn xe kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ x√≥a", false, StatusCodes.NOT_FOUND);
      }

      return ServiceResponse.success<boolean>("X√≥a b·∫øn xe th√†nh c√¥ng", true);
    } catch (error) {
      const errorMessage = `‚ùå L·ªói khi x√≥a b·∫øn xe v·ªõi ID ${id}: ${(error as Error).message}`;
      logger.error(errorMessage);
      return ServiceResponse.failure("ƒê√£ x·∫£y ra l·ªói khi x√≥a b·∫øn xe", false, StatusCodes.INTERNAL_SERVER_ERROR);
    }
  }
}

export const stationService = new StationService();
